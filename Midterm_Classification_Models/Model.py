import torch
import torch.nn as nn
import torch.nn.functional as F

class MalwareCNNModel3(nn.Module):
    def __init__(self, num_classes):  # Add num_classes as a parameter
        super(MalwareCNNModel3, self).__init__()
        # Convolutional layers
        self.conv1 = nn.Conv2d(1, 50, kernel_size=5, padding=2) # Keeping the same spatial dimensions
        self.conv2 = nn.Conv2d(50, 70, kernel_size=3, padding=1) # Repeated twice
        self.conv3 = nn.Conv2d(70, 70, kernel_size=3, padding=1)
        
        # Max Pooling layer
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)
        
        # Local Response Normalization layer
        self.lrn = nn.LocalResponseNorm(size=5, alpha=0.0001, beta=0.75, k=2)
        
        # Fully connected layers
        self.fc1 = nn.Linear(70 * 32 * 32, 256) # Adjusted for 128x128 input after pooling and convolutions
        self.fc2 = nn.Linear(256, num_classes)  # Change here to match the actual number of classes

    def forward(self, x):
        # Convolutional and pooling layers with ReLU activation
        x = self.pool(F.relu(self.conv1(x)))
        x = self.lrn(x) # Applying LRN after the first pooling
        x = F.relu(self.conv2(x))
        x = F.relu(self.conv3(x))
        x = self.pool(x)
        
        # Flattening the tensor for the fully connected layer
        x = x.view(-1, 70 * 32 * 32)
        
        # Fully connected layers with ReLU (for the first one) and without activation for the last
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x
