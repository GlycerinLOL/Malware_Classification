import cv2
import json
import os
import numpy as np
from tqdm import tqdm as tqdm_module
import bisect

N = 13
category = ['file', 'system', 'process', 'ole', 'ui', 'registry', 'misc', 'network', 'exception', '__notification__', 'synchronisation', 'resource', 'other']
num_class = len(category)
MAP_COLOR = {
    "network":          ["FFFFFF", "DCB5FF", "D3A4FF", "CA8EFF", "BE77FF", "B15BFF", "9F35FF", "921AFF", "8600FF", "6E00FF", "5B00AE"],
    "registry":         ["FFFFFF", "C1FFE4", "ADFEDC", "96FED1", "4EFEB3", "1AFD9C", "02F78E", "02DF82", "01B468", "019858", "01814A"],
    "file":             ["FFFFFF", "FFC1E0", "FFAAD5", "FF95CA", "FF79BC", "FF60AF", "FF359A", "FF0080", "F00078", "D9006C", "BF0060"],
    "system":           ["FFFFFF", "FFBFFF", "FFA6FF", "FF8EFF", "FF77FF", "FF44FF", "FF00FF", "E800E8", "D200D2", "AE00AE", "930093"],
    "process":          ["FFFFFF", "FFDAC8", "FFCBB3", "FFBD9D", "FFAD86", "FF9D6F", "FF8F59", "FF8040", "FF5809", "F75000", "D94600"],
    "ole":              ["FFFFFF", "D3FF93", "CCFF80", "B7FF4A", "A8FF24", "9AFF02", "8CEA00", "82D900", "73BF00", "64A600", "578C00"],
    "ui":               ["FFFFFF", "CAFFFF", "BBFFFF", "A6FFFF", "4DFFFF", "00FFFF", "00E3E3", "00CACA", "00AEAE", "009393", "005757"],
    "misc":             ["FFFFFF", "D6D6AD", "CDCD9A", "C2C287", "B9B973", "AFAF61", "A5A552", "949449", "808040", "707038", "616130"],
    "exception":        ["FFFFFF", "FFFF6F", "FFFF37", "F9F900", "E1E100", "C4C400", "A6A600", "8C8C00", "737300", "5B5B00", "5B5B00"],
    "__notification__": ["FFFFFF", "FFE66F", "FFE153", "FFDC35", "FFD306", "EAC100", "D9B300", "C6A300", "AE8F00", "977C00", "796400"],
    "synchronisation":  ["FFFFFF", "D8D8EB", "C7C7E2", "B8B8DC", "A6A6D2", "9999CC", "8080C0", "7373B9", "5A5AAD", "5151A2", "484891"],
    "resource":         ["FFFFFF", "97CBFF", "84C1FF", "66B3FF", "46A3FF", "2894FF", "0080FF", "0072E3", "0066CC", "005AB5", "004B97"],
    "other":            ["FFFFFF", "B9B9FF", "AAAAFF", "9393FF", "7D7DFF", "6A6AFF", "4A4AFF", "2828FF", "0000E3", "0000C6", "0000C6"],
}

category = ['file', 'system', 'process', 'ole', 'ui', 'registry', 'misc', 'network', 'exception', '__notification__', 'synchronisation', 'resource', 'other']

def transformation():
    path = "./dataset"
    error_files = []
    for folder in tqdm_module(os.listdir(path)):
        if folder == '.DS_Store':
            continue
        n_path = os.path.join(path, folder)
        for file_name in tqdm_module(os.listdir(n_path)):
            calls = []
            image_name = file_name.split('.')[0]

            # main body
            try:
                with open(os.path.join(n_path, file_name), "r") as file:
                    json_data = json.load(file)
                    
                    # extract calls => (category, time)
                    process_calls(json_data, calls)

                    # get start , end time and unit time
                    start_time, end_time = get_start_end_time(calls)
                    unit_time = (end_time - start_time) / N
                    
                    # count the number of calls in each category
                    data = process_calls_data(calls, start_time, unit_time)

                    # generate image
                    generate_image(folder, image_name, data)

            except Exception as e:
                error_files.append(file_name)
                continue

    with open("transformErrorLog.txt", "w") as error_log_file:
        for error_file in error_files:
            error_log_file.write(error_file + "\n")

def process_calls(json_data, calls):
    for process in json_data['behavior']['processes']:
        for call in process["calls"]:
            calls.append({
                "category": call["category"],
                "time": call["time"]
            })

def get_start_end_time(calls):
    start_time = calls[0]["time"]
    end_time = calls[-1]["time"]
    return start_time, end_time

def process_calls_data(calls, start_time, unit_time):
    data = [[0 for _ in range(num_class)] for _ in range(N)]

    for call in calls:
        time_index = int((call["time"] - start_time) / unit_time) - 1
        if time_index >= N:
            time_index = 0

        curr_cat = call['category']
        if curr_cat in category:
            cat_index = category.index(curr_cat)
            data[time_index][cat_index] += 1
        else:
            data[time_index][-1] += 1

    return data

def generate_image(folder_name, image_name, data):
    image = np.zeros((num_class, N, 3), dtype=np.uint8)

    for time_index in range(N):
        for cat in range(num_class):
            color_index = occurence_to_index(data[time_index][cat])
            image[cat, time_index] = hex_to_rgb(MAP_COLOR[category[cat]][color_index])

    if not os.path.exists(f'./output_image/{folder_name}'):
        os.makedirs(f'./output_image/{folder_name}')
    cv2.imwrite(f'./output_image/{folder_name}/{image_name}.jpg', image)


def hex_to_rgb(hex_color):
    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

count_thresholds = [0, 1, 4, 8, 13, 19, 26, 34, 43, 101, 201]

def occurence_to_index(count):
    index = bisect.bisect_right(count_thresholds, count)
    return index - 1  # 返回索引值

if __name__ == "__main__":
    transformation()
