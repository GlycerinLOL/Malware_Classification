import cv2
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import os
from xgboost import XGBClassifier
from joblib import dump
from tqdm import tqdm

params_xgb = {'max_depth': 36,
            'silent' : 0,
            'device': 'cuda',
            'tree_method': 'hist',
            'objective' : 'multi:softmax',
            'num_class' : 25,
            'n_estimators': 400,
            'random_state': 42,
            'verbosity' : 2
            }
map1 = {}
map2 = {}
classes = []

def extract_hog_features(image, hog):
    
    hog_features = hog.compute(image)
    hog_features = hog_features.flatten()
    return hog_features

def load_data_and_extract_features():

    images = []
    labels = []
    counter = tqdm(total=67117)
    win_size = (32, 32)
    block_size = (8, 8)
    block_stride = (4, 4)
    cell_size = (4, 4)
    nbins = 9   

    hog = cv2.HOGDescriptor(win_size, block_size, block_stride, cell_size, nbins)

    for c in classes:
        path = f'datasets/malwares_images_virus31320/{c}'
        pics = os.listdir(path)
        key = map2[c]
        for p in pics:
            
            picPath = f'datasets/malwares_images_virus31320/{c}/{p}'
            if not os.path.exists(path):
                continue
            image = cv2.imread(picPath, cv2.IMREAD_GRAYSCALE)
            image = cv2.resize(image, (64, 64))
            hog_feature = extract_hog_features(image, hog)
            images.append(hog_feature)
            labels.append(key)
            
            counter.update(1)

    print("read file end")
    
    return images, labels

if __name__ == "__main__":

    folder = "datasets/malwares_images_virus31320"
    classes = os.listdir(folder)

    count = 0
    y_tests = []
    for i in classes:
        map1[count] = i
        map2[i] = count
        count+=1
 
    X, y = load_data_and_extract_features()
    
    # y = np.asanyarray(y, dtype=object)
    # le = LabelEncoder()
    # y = le.fit_transform(y)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    X_train_1, X_train_3, y_train_1, y_train_3 = train_test_split(X_train, y_train, test_size=0.5, random_state=0)
    
    X_train_1, X_train_2, y_train_1, y_train_2 = train_test_split(X_train_1, y_train_1, test_size=0.5, random_state=0)
    X_train_3, X_train_4, y_train_3, y_train_4 = train_test_split(X_train_3, y_train_3, test_size=0.5, random_state=0)
    X_train_list = [X_train_1, X_train_2, X_train_3, X_train_4]
    y_train_list = [y_train_1, y_train_2, y_train_3, y_train_4]

    print("start training")

    xgboostModel = XGBClassifier(**params_xgb)

    for i in range(0, 4):
        if os.path.isfile(f'./model{i-1}'): 
           print(i)
           xgboostModel = XGBClassifier(**params_xgb)
           xgboostModel.load_model(f'./model{i-1}')
    
        xgboostModel.fit(X_train_list[i], y_train_list[i])
        xgboostModel.save_model(f'model{i}')
        

    predicted = xgboostModel.predict(X_test)

    print("The accuracy of xgbClassifier is : ", accuracy_score(y_test, predicted.round())*100, "%")
    print("The precision of xgbClassifier is : ", precision_score(y_test, predicted.round())*100, "%")
    print("The recall of xgbClassifier is : ", recall_score(y_test, predicted.round())*100, "%")
    print("The f1 of xgbClassifier is : ", f1_score(y_test, predicted.round())*100, "%")
    dump(xgboostModel, 'ckpt/model_xgb.joblib')