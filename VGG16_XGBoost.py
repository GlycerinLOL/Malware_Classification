import cv2
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.metrics import mean_squared_error as mse
from sklearn.preprocessing import LabelEncoder
import os
import numpy as np
from xgboost import XGBClassifier
from joblib import dump
from tqdm import tqdm
import tensorflow as tf
import warnings
warnings.filterwarnings("ignore")

DATA_NUM = 18152
MAX_DATA_NUM = 67127

folder = "./malwares_images_virus31320"
classes = os.listdir(folder)
classes_to_label = dict()
for i in range(0, len(classes)):
    classes_to_label[classes[i]] = i
last_data = 0

def load_data():
    global last_data
    global DATA_NUM
    if last_data + DATA_NUM >= MAX_DATA_NUM: DATA_NUM = MAX_DATA_NUM - last_data
    images = np.zeros((DATA_NUM, 224, 224, 3), dtype=np.float32)
    labels = []

    counter = tqdm(total=DATA_NUM)
    count = 0
    cur = 0
    for c in classes:
        path = f'./malwares_images_virus31320/{c}'
        pics = os.listdir(path)
        count = 0
        for p in pics:

            picPath = f'./malwares_images_virus31320/{c}/{p}'
            if not os.path.exists(path):
                continue
            image = cv2.imread(picPath, cv2.IMREAD_COLOR)
            image = cv2.resize(image, (224, 224))
            image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

            images[cur] = image
            labels.append(classes_to_label[c])
            count += 1
            last_data += 1
            cur += 1
            counter.update(1)
            if count == 2000: break    

    return images, labels

params_xgb = {'max_depth': 36,
            'device': 'cuda',
            'tree_method': 'hist',
            'objective' : 'multi:softmax',
            'num_class' : 25,
            'n_estimators': 400,
            'random_state': 42,
            'verbosity' : 2
            }

if __name__ == "__main__":

    le = LabelEncoder()
    
    base_model = tf.keras.applications.VGG16(  include_top=False,
                                               weights='imagenet')

    base_model.trainable = False
    base_model.summary()

    xgboostModel = XGBClassifier(**params_xgb)
    le = LabelEncoder()

    
    images, labels =load_data()
    
    y_train_encoded = le.fit_transform(labels)
    
    del(labels)

    X_train, X_test, y_train, y_test = train_test_split(images, y_train_encoded, test_size=0.2, random_state=42)
    del(images)

    
    X_train_features = base_model.predict(X_train)
    X_train_features = X_train_features.reshape(X_train_features.shape[0], -1)
    del(X_train)

    X_test_features = base_model.predict(X_test)
    X_test_features = X_test_features.reshape(X_test_features.shape[0], -1)
    del(X_test)

    print("Start training XGBoost")
    xgboostModel.fit(X_train_features, y_train, verbose=True)
    xgboostModel.save_model(f'./ckpt/model{i}.json')

    predicted = xgboostModel.predict(X_test_features)
    print("The accuracy of xgbClassifier is : ", accuracy_score(y_test, predicted)*100, "%")    
    print("The precision of xgbClassifier is : ", precision_score(y_test, predicted, average='micro')*100, "%")
    print("The recall of xgbClassifier is : ", recall_score(y_test, predicted, average='micro')*100, "%")
    print("The f1 of xgbClassifier is : ", f1_score(y_test, predicted, average='micro')*100, "%")
    print("The mse is : ", mse(y_test, predicted))
    
    del(X_test_features)
    del(y_test)

        