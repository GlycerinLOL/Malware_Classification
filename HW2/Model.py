import torch
import torch.nn as nn
import torch.nn.functional as F

class MalwareCNN(nn.Module):
    def __init__(self, num_classes):
        super(MalwareCNN, self).__init__()
        self.conv1 = nn.Conv2d(1, 6, kernel_size=3, stride=2, padding=0)  # First convolutional layer
        self.conv2 = nn.Conv2d(6, 16, kernel_size=3, stride=2, padding=0)  # Second convolutional layer
        self.fc1 = nn.Linear(16 * 9 * 9, 250)  # Adjusted for 9x9 output from conv2
        self.fc2 = nn.Linear(250, 100)  # Second fully connected layer
        self.output = nn.Linear(100, num_classes)  # Output layer, adjusted for number of classes

    def forward(self, x):
        x = torch.relu(self.conv1(x))
        x = torch.relu(self.conv2(x))
        x = x.view(x.size(0), -1)  # Flatten the tensor for the fully connected layer
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.output(x)  # No activation here, softmax will be applied in the loss
        return x

# class MalwareCNN(nn.Module):
#     def __init__(self, num_classes):
#         super(MalwareCNN, self).__init__()
#         self.conv1 = nn.Conv2d(1, 6, kernel_size=3, stride=2, padding=0)  # First convolutional layer
#         self.conv2 = nn.Conv2d(6, 16, kernel_size=3, stride=2, padding=0)  # Second convolutional layer
#         self.fc1 = nn.Linear(16 * 55 * 55, 250)  # Adjusted for 55x55 output from conv2
#         self.fc2 = nn.Linear(250, 100)  # Second fully connected layer
#         self.output = nn.Linear(100, num_classes)  # Output layer, adjusted for number of classes

#     def forward(self, x):
#         x = torch.relu(self.conv1(x))
#         x = torch.relu(self.conv2(x))
#         x = x.view(x.size(0), -1)  # Flatten the tensor for the fully connected layer
#         x = torch.relu(self.fc1(x))
#         x = torch.relu(self.fc2(x))
#         x = self.output(x)  # No activation here, softmax will be applied in the loss
#         return x