from scapy.all import *
import os
import numpy as np
from PIL import Image
from pathlib import Path
import shutil
from tqdm import tqdm

def traffic_splitting(input_pcap, output_folder):
    # Read the input pcap file
    packets = rdpcap(str(input_pcap))
    # print(packets)
    # Dictionary to store flows
    flows = {}

    # Iterate over each packet
    for packet in packets:
        # Only process TCP and UDP packets
        if TCP in packet or UDP in packet:
            # Extract flow key based on source and destination IP, source and destination ports, and protocol
            flow_key = (packet[IP].src, packet[IP].dst, packet.sport, packet.dport, "TCP" if TCP in packet else "UDP")
            
            # Append packet to the corresponding flow
            if flow_key in flows:
                flows[flow_key].append(packet)
            else:
                flows[flow_key] = [packet]

    # Write flows to individual pcap files
    for flow_key, flow_packets in flows.items():
        output_pcap = f"{output_folder}/flow_{flow_key[0]}_{flow_key[1]}_{flow_key[2]}_{flow_key[3]}_{flow_key[4]}.pcap"
        wrpcap(output_pcap, flow_packets)


def traffic_clearing(input_folder, output_folder):
    for input_pcap in os.listdir(input_folder):
        input_pcap_path = os.path.join(input_folder, input_pcap)
        packets = rdpcap(str(input_pcap_path))
        
        # Remove MAC addresses in data link layer
        for packet in packets:
            del packet.src
            del packet.dst
        
        # Remove IP addresses in IP layer
        for packet in packets:
            if IP in packet:
                del packet[IP].src
                del packet[IP].dst
                
        # Extract relevant information for each packet and convert to tuple
        packet_info = [(packet.sport, packet.dport, "TCP" if TCP in packet else "UDP") for packet in packets]
        # Remove duplicate packets
        print(packet_info)
        unique_packets = set(packet_info)
        print(unique_packets)
        # Write processed packets to output pcap file
        output_pcap_path = os.path.join(output_folder, input_pcap)
        wrpcap(output_pcap_path, unique_packets)

def image_generation(input_folder, output_folder, width, height):
    for input_pcap in os.listdir(input_folder):
        input_pcap_path = os.path.join(input_folder, input_pcap)
        with open(input_pcap_path, 'rb') as file:
            pcap_data = file.read()

        # Trim or pad pcap data to the desired length
        pcap_data = pcap_data[:width * height] if len(pcap_data) > width * height else pcap_data.ljust(width * height, b'\x00')

        # Convert pcap data to grayscale image
        grayscale_values = [byte * 255 // 255 for byte in pcap_data]
        array = np.array(grayscale_values).reshape((height, width)).astype(np.uint8)
        image = Image.fromarray(array, 'L')

        # Save the grayscale image
        output_image_path = os.path.join(output_folder, os.path.splitext(input_pcap)[0] + '.png')
        image.save(output_image_path)

# Path Parameter
PCAP_FOLDER_PATH = "dataset3"
PCAP_OUTPUT_PATH = "pcapOutput"
IMAGE_OUTPUT_PATH = "imageOutput"

if __name__ == "__main__":
    # read pcap_folder
    if Path(PCAP_OUTPUT_PATH).exists():
        shutil.rmtree(Path(PCAP_OUTPUT_PATH))
    Path(PCAP_OUTPUT_PATH).mkdir()
    if Path(IMAGE_OUTPUT_PATH).exists():
        shutil.rmtree(Path(IMAGE_OUTPUT_PATH))
    Path(IMAGE_OUTPUT_PATH).mkdir()

    for category in (Path(PCAP_FOLDER_PATH).iterdir()):
        Path(PCAP_OUTPUT_PATH, category.name).mkdir()
        Path(IMAGE_OUTPUT_PATH, category.name).mkdir()
        # print(f"Category ----> :{category.name}")
        for file in Path(category).glob("*"):
            if Path(PCAP_OUTPUT_PATH, category.name, file.stem).exists():
                shutil.rmtree(Path(PCAP_OUTPUT_PATH, category.name, file.stem))
            Path(PCAP_OUTPUT_PATH, category.name, file.stem).mkdir()
            print(file)
            # save each flow to a pcap file
            traffic_splitting(file, f"{PCAP_OUTPUT_PATH}\\{category.name}\\{file.stem}")

            for file_folder in Path(f"{PCAP_OUTPUT_PATH}\\{category.name}").glob("*"):
                traffic_clearing(file_folder, f"{PCAP_OUTPUT_PATH}\\{category.name}\\{file.stem}")
                image_generation(file_folder, f"{IMAGE_OUTPUT_PATH}\\{category.name}\\{file.stem}.png")