from collections import OrderedDict
from typing import List, Tuple
import warnings

import matplotlib.pyplot as plt
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision
import torchvision.transforms as transforms
from torch.utils.data import DataLoader, random_split
from torchvision.datasets import ImageFolder
from tqdm import tqdm
from datasets import load_dataset

import flwr as fl
from flwr.common import Metrics
from flwr_datasets.partitioner import IidPartitioner
from flwr.server.strategy import DifferentialPrivacyClientSideFixedClipping 
from flwr.client.mod import fixedclipping_mod

from Model import Net

warnings.filterwarnings("ignore", category=UserWarning)

DEVICE = torch.device("cuda")
print(torch.cuda.is_available())
print(
    f"Training on {DEVICE} using Pytorch {torch.__version__} and Flower {fl.__version__}"
)

CLASSES = (
    "4shared",
    "black",
    "downloadsponsor",
    "fakeie",
    "fearso",
    "hijacker",
    "kido",
    "llac",
    "Normal",
    "wabot",
    "zvuzona",
    "zzinfor"
)

NUM_CLIENTS = 3
BATCH_SIZE = 32
EPOCH = 10
DATASET_FOLDER = "dataset"
ROUND = 10

DP_PARAMS = {
    "noise_multiplier": 0.4,
    "clipping_norm": NUM_CLIENTS/20,
    "num_sampled_clients": NUM_CLIENTS,
}

def apply_transforms(batch):
        """Apply transforms to the partition from FederatedDataset."""
        transform = transforms.Compose([
            transforms.Resize((28, 28)),
            transforms.Grayscale(),
            transforms.ToTensor(),
        ])
        batch["image"] = [transform(img) for img in batch["image"]]
        return batch

def load_data():
    datasets = load_dataset("imagefolder", data_dir=DATASET_FOLDER)['train'].train_test_split(test_size=0.2, seed=42)
    trainset = datasets['train']
    testset = datasets['test']
    partitioner = IidPartitioner(num_partitions=NUM_CLIENTS)
    partitioner.dataset = trainset
    trainloaders = []
    valloaders = []
    for id in range(NUM_CLIENTS):
        ds = partitioner.load_partition(id)
        ds = ds.train_test_split(test_size=0.1, seed=42)
        ds = ds.with_transform(apply_transforms)
        trainloaders.append(DataLoader(ds['train'], batch_size=BATCH_SIZE, shuffle=True))
        valloaders.append(DataLoader(ds['test'], batch_size=BATCH_SIZE))
    testloader = DataLoader(testset, batch_size=BATCH_SIZE)
    return trainloaders, valloaders, testloader

trainloaders, valloaders, testloader = load_data()

def train(net, trainloader: DataLoader, epochs: int, verbose=False):
    criterion = torch.nn.CrossEntropyLoss()
    optimizer = torch.optim.SGD(net.parameters(), lr=0.001, momentum=0.9)
    net.train()
    for epoch in range(epochs):
        print(f"Epoch: {epoch}")
        correct, total, epoch_loss = 0, 0, 0.0
        for batch in tqdm(trainloader):
            images, labels = batch["image"], batch["label"]
            images, labels = images.to(DEVICE), labels.to(DEVICE)
            optimizer.zero_grad()
            outputs = net(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            epoch_loss += loss
            total += labels.size(0)
            correct += (torch.max(outputs.data, 1)[1] == labels).sum().item()
        epoch_loss /= len(trainloader.dataset)
        epoch_acc = correct / total
        if verbose:
            print(f"Epoch {epoch+1}: train loss {epoch_loss}, accuracy {epoch_acc}")

def test(net, testloader):
    criterion = torch.nn.CrossEntropyLoss()
    correct, total, loss = 0, 0, 0.0
    net.eval()
    with torch.no_grad():
        for batch in tqdm(testloader):
            images, labels = batch["image"], batch["label"]
            images, labels = images.to(DEVICE), labels.to(DEVICE)
            outputs = net(images)
            loss += criterion(outputs, labels).item()
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
    loss /= len(testloader.dataset)
    accuracy = correct / total
    return loss, accuracy

def get_parameters(net) -> List[np.ndarray]:
    return [val.cpu().numpy() for _, val in net.state_dict().items()]

def set_parameters(net, parameters: List[np.ndarray]):
    params_dict = zip(net.state_dict().keys(), parameters)
    state_dict = OrderedDict({k: torch.Tensor(v) for k, v in params_dict})
    net.load_state_dict(state_dict, strict=True)

class FlowerClient(fl.client.NumPyClient):
    def __init__(self, net, trainloader, valloader):
        self.net = net
        self.trainloader = trainloader
        self.valloader = valloader

    def get_parameters(self, config):
        return get_parameters(self.net)
    
    def fit(self, parameters, config):
        set_parameters(self.net, parameters)
        train(self.net, self.trainloader, epochs=EPOCH)
        return get_parameters(self.net), len(self.trainloader), {}
    
    def evaluate(self, parameters, config):
        set_parameters(self.net, parameters)
        loss, accuracy = test(self.net, self.valloader)
        return float(loss), len(self.valloader), {"accuracy": float(accuracy)}

def client_fn(cid: str) -> FlowerClient:
    net = Net().to(DEVICE)

    trainloader = trainloaders[int(cid)]
    valloader = valloaders[int(cid)]

    return FlowerClient(net, trainloader, valloader).to_client()

''' 設定 client 的模式 => fixedclipping_mod '''
client = fl.client.ClientApp(
    client_fn=client_fn,
    mods=[fixedclipping_mod]
)

def weighted_average(metrics: List[Tuple[int, Metrics]]) -> Metrics:
    accuracies = [num_examples * m["accuracy"] for num_examples, m in metrics]
    examples = [num_examples for num_examples, _ in metrics]
    return {"accuracy": sum(accuracies) / sum(examples)}


def federated_learning():
    strategy = fl.server.strategy.FedAvg(
        fraction_fit=1.0,
        fraction_evaluate=0.5,
        min_fit_clients=NUM_CLIENTS,
        min_evaluate_clients=NUM_CLIENTS,
        min_available_clients=NUM_CLIENTS,
        evaluate_metrics_aggregation_fn=weighted_average
    )
    ''' 在原先的 strategy 上包裝 DifferentialPrivacy 的 strategy '''
    dp_strategy = DifferentialPrivacyClientSideFixedClipping(
        strategy,
        noise_multiplier=DP_PARAMS["noise_multiplier"],
        clipping_norm=DP_PARAMS["clipping_norm"],
        num_sampled_clients=DP_PARAMS["num_sampled_clients"],
    )
    client_resources = None
    if DEVICE.type == "cuda":
        client_resources = {"num_gpus": 1}
    
    fl.simulation.start_simulation(
        client_fn=client_fn,
        num_clients=NUM_CLIENTS,
        config=fl.server.ServerConfig(num_rounds=ROUND),
        strategy=dp_strategy,
        client_resources=client_resources,
    )

if __name__ == "__main__":
    federated_learning()